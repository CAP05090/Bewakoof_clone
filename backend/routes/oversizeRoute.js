const {OverSizeModel} = require("../models/overSizedModel")

const overSizedRouter = require("express").Router()

// YAML
/**
 * @swagger
 *  components:
 *      schemas:
 *          OverSizedT_shirts:
 *              type: object
 *              properties:
 *                  id:
 *                      type: string
 *                      description: Unique id generated by MongoDB.
 *                  category:
 *                      type: string
 *                      description: Category of the t-shirts (men, women, accessories, winterwear, etc)
 *                  title:
 *                      type: string
 *                      description: Name of the T-Shirts
 *                  description:
 *                      type: string
 *                      description: details of the T-Shirts
 *                  price:
 *                      type: number
 *                      formate: int32Array
 *                      description: Price of the T-Shirts
 *                  rating:
 *                      type: number
 *                      formate: float
 *                      description: rating given by the user.       
 */

/**
 * @swagger
 *  tags:
 *      name: Over Sized T-Shirts
 *      description: All the API routes to Over Size tshirts.
 */

// Get Over Sized T-shirts data
/**
 * @swagger
 *  /oversize:
 *      get:
 *          summary: Get all the best pic Data sorted with a category.
 *          tags: [Over Sized T-Shirts]
 *          async: true
 *          parameters: 
 *              - in: query
 *                name: category
 *                schema:
 *                  type: string
 *                required: false
 *                description: Category of the results.
 *          responses:
 *              '200':
 *                  description: The list of all Over Sized T-Shirts.
 *                  content:
 *                      application/json:
 *                          schema:
 *                              $ref: "#/components/schemas/OverSizedT_shirts"
 *                          example:
 *                              OverSizedTshirts: 
 *                                  - id: "1"
 *                                    category: "men, women, wenterwear, etc."
 *                                    poster: "https://shop.bewakoof.com/cdn......"
 *                                    title: "T-shirts Title"
 *                                    description: "Men's Black Ashura Graphic Printed Oversized Acid Wash T-shirt"
 *                                    price: "299"
 *                                    rating: "4.5"
 *              '500':
 *                  description: Internal Server Error
 *                  content:
 *                      application/json:
 *                          example:
 *                              error: "Error message indicating the issue"
 */

overSizedRouter.get("/", async(req, res)=>{
    let q = req.query
    try {
        let data = await OverSizeModel.find({q})
        res.status(200).send({"Over Sized T-shirts": data})
    } catch (error) {
        res.status(500).send({"err": error.message})
    }
})

// Add a new data
/**
 * @swagger
 *  /oversize/add:
 *      post:
 *          summary: Added a new Over size t-shirts to DB.
 *          tags: [Over Sized T-Shirts]
 *          async: true
 *          requestBody:
 *              required: true
 *              content:
 *                  application/json:
 *                      schema: 
 *                          $ref: "#/components/schemas/OverSizedT_shirts"
 *          responses:
 *              '200':
 *                  description: The new over sized t-shirt hasbeen Added.
 *              '400':
 *                  description: Bad request or Something Wrong.
 */

overSizedRouter.post("/add", async(req, res)=>{
    try {
        const data = new OverSizeModel(req.body)
        await data.save()
        res.status(200).send({"msg": "New Over Sized T-shirts added to DB.", "data": data})
    } catch (error) {
        res.status(400).send({"err": error.message})
    }
})

// Update data
/**
 * @swagger
 *  /oversize/update/{id}:
 *      patch: 
 *          summary: Update the details of the specific Over size t-shirts.
 *          tags: [Over Sized T-Shirts]
 *          async: true
 *          parameters:
 *              - in: path
 *                name: id
 *                schema:
 *                  type: string
 *                required: true
 *                description: Unique id of a particular Over sized t-shirts.
 *          requestBody:
 *              required: true
 *              content:
 *                  application/json:
 *                      schema:
 *                          $ref: "#/components/schemas/OverSizedT_shirts"
 *          responses:
 *              '200':
 *                  description: Over sized t-shirts has been updated successfully.
 *                  content:
 *                      application/json:
 *                          example:
 *                              msg: "Over sized t-shirts has been updated successfully"
 *              '400':
 *                  description: Bad request or something went wrong.
 *                  content:
 *                      application/json:
 *                          example:
 *                              msg: Error message indicating the issue
 */

overSizedRouter.patch("/update/:id", async(req, res)=>{
    const id = req.params
    try {
        await OverSizeModel.findByIdAndUpdate({_id:id}, req.body)
        res.status(200).send({"msg":`Over sized T-Shirt id ${id} has been updated `})
    } catch (error) {
        res.status(400).send({"err": error.message})
    }
})

// Delete data
/**
 * @swagger
 *  /oversize/delete/{id}:
 *      delete: 
 *          summary: delete a specific over size t-shirts.
 *          tags: [Over Sized T-Shirts]
 *          async: true
 *          parameters:
 *              - in: path
 *                name: id
 *                schema:
 *                  type: string
 *                required: true
 *                description: Unique id of a particular over size t-shirts.
 *          responses:
 *              '200':
 *                  description: over size t-shirts has been deleted successfully.
 *                  content:
 *                      application/json:
 *                          example:
 *                              msg: "over size t-shirts has been deleted successfully"
 *              '400':
 *                  description: Bad request or something went wrong.
 *                  content:
 *                      application/json:
 *                          example:
 *                              msg: Error message indicating the issue
 */

overSizedRouter.delete("/delete/:id", async(req, res)=>{
    const id = req.params
    try {
        await OverSizeModel.findByIdAndDelete({_id:id})
        res.status(200).send({"msg":`Over sized T-Shirt id ${id} has been Deleted `})
    } catch (error) {
        res.status(400).send({"err": error.message})
    }
})

module.exports = {overSizedRouter}